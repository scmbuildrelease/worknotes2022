vowel.insert(3, 'o')
vowel.pop(3)

The nonlocal keyword is used to work with variables inside nested functions, where the variable should not belong to the inner function.
Use the keyword nonlocal to declare that the variable is not local.


The global keyword is used to create global variables from a no-global scope, e.g. inside a function.


count = 1
 2 
 3 def a():
 4     count = 'a函数里面'  　　#如果不事先声明，那么函数b中的nonlocal就会报错
 5     def b():
 6         nonlocal count
 7         print(count)
 8         count = 2
 9     b()
10     print(count)
11 
12 if __name__ == '__main__':
13     a()
14     print(count)

a函数里面
2
1


pip install wmi
 #!/usr/bin/env python # -*- coding: utf-8 -*- import os, sys
import wmi
c = wmi.WMI()
#处理器 def printCPU():
    tmpdict = {}
    tmpdict["CpuCores"] = 0
    for cpu in c.Win32_Processor():     
        tmpdict["cpuid"] = cpu.ProcessorId.strip()
        tmpdict["CpuType"] = cpu.Name
        tmpdict['systemName'] = cpu.SystemName
        try:
            tmpdict["CpuCores"] = cpu.NumberOfCores
        except:
            tmpdict["CpuCores"] += 1
        tmpdict["CpuClock"] = cpu.MaxClockSpeed 
        tmpdict['DataWidth'] = cpu.DataWidth
    print tmpdict
    return  tmpdict

#主板 def printMain_board():
    boards = []
    # print len(c.Win32_BaseBoard()):     for board_id in c.Win32_BaseBoard():
        tmpmsg = {}
        tmpmsg['UUID'] = board_id.qualifiers['UUID'][1:-1]   #主板UUID,有的主板这部分信息取到为空值，ffffff-ffffff这样的         tmpmsg['SerialNumber'] = board_id.SerialNumber                #主板序列号         tmpmsg['Manufacturer'] = board_id.Manufacturer       #主板生产品牌厂家         tmpmsg['Product'] = board_id.Product                 #主板型号         boards.append(tmpmsg)
    print boards
    return boards

#BIOS def printBIOS():
    bioss = []
    for bios_id in c.Win32_BIOS():
        tmpmsg = {}
        tmpmsg['BiosCharacteristics'] = bios_id.BiosCharacteristics   #BIOS特征码         tmpmsg['version'] = bios_id.Version                           #BIOS版本         tmpmsg['Manufacturer'] = bios_id.Manufacturer.strip()                 #BIOS固件生产厂家         tmpmsg['ReleaseDate'] = bios_id.ReleaseDate                   #BIOS释放日期         tmpmsg['SMBIOSBIOSVersion'] = bios_id.SMBIOSBIOSVersion       #系统管理规范版本         bioss.append(tmpmsg)
    print bioss
    return bioss

#硬盘 def printDisk():
    disks = []
    for disk in c.Win32_DiskDrive():
        # print disk.__dict__         tmpmsg = {}
        tmpmsg['SerialNumber'] = disk.SerialNumber.strip()
        tmpmsg['DeviceID'] = disk.DeviceID
        tmpmsg['Caption'] = disk.Caption
        tmpmsg['Size'] = disk.Size
        tmpmsg['UUID'] = disk.qualifiers['UUID'][1:-1]
        disks.append(tmpmsg)
    for d in disks:
        print d
    return disks

#内存 def printPhysicalMemory():
    memorys = []
    for mem in c.Win32_PhysicalMemory():
        tmpmsg = {}
        tmpmsg['UUID'] = mem.qualifiers['UUID'][1:-1]
        tmpmsg['BankLabel'] = mem.BankLabel
        tmpmsg['SerialNumber'] = mem.SerialNumber.strip()
        tmpmsg['ConfiguredClockSpeed'] = mem.ConfiguredClockSpeed
        tmpmsg['Capacity'] = mem.Capacity
        tmpmsg['ConfiguredVoltage'] = mem.ConfiguredVoltage
        memorys.append(tmpmsg)
    for m in memorys:
        print m
    return memorys

#电池信息，只有笔记本才会有电池选项 def printBattery():
    isBatterys = False
    for b in c.Win32_Battery():
        isBatterys = True
    return isBatterys

#网卡mac地址： def printMacAddress():
    macs = []
    for n in  c.Win32_NetworkAdapter():
        mactmp = n.MACAddress
        if mactmp and len(mactmp.strip()) > 5:
            tmpmsg = {}
            tmpmsg['MACAddress'] = n.MACAddress
            tmpmsg['Name'] = n.Name
            tmpmsg['DeviceID'] = n.DeviceID
            tmpmsg['AdapterType'] = n.AdapterType
            tmpmsg['Speed'] = n.Speed
            macs.append(tmpmsg)
    print macs
    return macs

def main():

    printCPU()
    printMain_board()
    printBIOS()
    printDisk()
    printPhysicalMemory()
    printMacAddress()
    print printBattery()
    

if __name__ == '__main__':
    main()
 
 
 
 
 
 
 
 
 
 
 

from datetime import date
from datetime import time
from datetime import datetime

def main():

  today = date.today()
  print ("Today's date is ", today)
  print ("Date Components: ", today.day, today.month, today.year)
  
  print ("Today's Weekday #: ", today.weekday())
  days = ["monday","tuesday","wednesday","thursday","friday","saturday","sunday"]
  print ("Which is a " + days[today.weekday()])
  
  today = datetime.now()
  print  ("The current date and time is ", today)
  
  t = datetime.time(datetime.now())
  print ("The current time is ", t)
  
  
if __name__ == "__main__":
  main();
  
  
  
import calendar
c = calendar.TextCalendar(calendar.SUNDAY)
str = c.formatmonth(2017, 1, 0, 0) 
hc = calendar.HTMLCalendar(calendar.SUNDAY)
str = hc.formatmonth(2017, 1) 
for i in c.itermonthdays(2017, 8):
  print (i)
for name in calendar.month_name:
  print (name)
for day in calendar.day_name:
  print (day) 
for m in range(1,13):
  cal = calendar.monthcalendar(2017, m)
  weekone = cal[0]
  weektwo = cal[1]
  if weekone[calendar.FRIDAY] != 0:
    meetday = weekone[calendar.FRIDAY]
  else:
    meetday = weektwo[calendar.FRIDAY]
  print ("%10s %2d" % (calendar.month_name[m], meetday))









https://docs.python.org/3.9/library/os.path.html

x.decode('utf-8')

import csv
def merge_csv(csv_list, output_path):
    # build list with all fieldnames
    fieldnames = list()
    for file in csv_list:
        with open(file, 'r') as input_csv:
            fn = csv.DictReader(input_csv).fieldnames
            fieldnames.extend(x for x in fn if x not in fieldnames)
    # write data to output file based on field names
    with open(output_path, 'w', newline='') as output_csv:
        writer = csv.DictWriter(output_csv, fieldnames=fieldnames)
        writer.writeheader()
        for file in csv_list:
            with open(file, 'r') as input_csv:
                reader = csv.DictReader(input_csv)
                for row in reader:
                    writer.writerow(row)
if __name__ == '__main__':
    merge_csv(['class1.csv', 'class2.csv'], 'all_students.csv')
    
    
    import os
from zipfile import ZipFile
def zip_all(search_dir, extension_list, output_path):
    with ZipFile(output_path, 'w') as output_zip:
        for root, dirs, files in os.walk(search_dir):
            rel_path = os.path.relpath(root, search_dir)
            for file in files:
                name, ext = os.path.splitext(file)
                if ext.lower() in extension_list:
                    output_zip.write(os.path.join(root, file),
                                     arcname=os.path.join(rel_path, file))
if __name__ == '__main__':
    zip_all('.\\my_stuff', ['.jpg','.txt'], 'my_stuff.zip')

    import os
from os.path import join, getsize
for root, dirs, files in os.walk('python/Lib/email'):
    print(root, "consumes", end=" ")
    print(sum(getsize(join(root, name)) for name in files), end=" ")
    print("bytes in", len(files), "non-directory files")
    if 'CVS' in dirs:
        dirs.remove('CVS')  # don't visit CVS directories
        
        
        
  import os
import re
import urllib.parse
import urllib.request
def download_files(first_url, output_dir):
    if not os.path.isdir(output_dir):
        os.mkdir(output_dir)
    url_head, url_tail = os.path.split(first_url)
    first_index = re.findall(r'[0-9]+', url_tail)[-1]
    index_count, error_count = 0, 0
    while(error_count < 5):
        next_index = str(int(first_index) + index_count)
        if first_index[0] == '0': # zero padded
            next_index = '0' * (len(first_index) - len(next_index)) + next_index
        next_url = urllib.parse.urljoin(url_head, re.sub(first_index, next_index, url_tail))
        try:
            output_file = os.path.join(output_dir, os.path.basename(next_url))
            urllib.request.urlretrieve(next_url, output_file)
            print('Successfully downloaded {}'.format(os.path.basename(next_url)))
        except IOError:
            print('Could not retrieve {}'.format(next_url))
            error_count += 1
        index_count += 1        
if __name__ == '__main__':
    download_files('http://123.xx.net/image001.jpg', '.\\images')
    
    
    
    
        
    
    
    
    utf8 = "Hello, World!".encode()
print(utf8)
OUTPUT
b'Hello, World!'
print(utf8.decode())
OUTPUT
Hello, World!

      
      with open(path, encoding='utf-8') as file:
        all_words = re.findall(r"[0-9a-zA-Z-']+", file.read())
        all_words = [word.upper() for word in all_words]
        word_counts = collections.Counter(all_words)
   
   import secrets
def generate_passphrase(num_words):
    with open('diceware.wordlist.asc', 'r') as file:    
        lines = file.readlines()[2:7778]
        word_list = [line.split()[1] for line in lines]
    words = [secrets.choice(word_list) for i in range(num_words)]
    return ' '.join(words)
   
   
   minprice=float("inf")
    for 2. Add Two Numbers, since the sum is the new number ,should create a new node, for remove duplicated node
   since it is already be the node and val, we do not need to create new one and just set the next links.
   
        dummy = ListNode(0,head)
        pred = dummy  
        pred.next = head.next
        return dummy.next
        
        result=ListNode(0)
        res=result
        res.next=ListNode(summ)
        res=res.next
        
   
   forwards = ''.join(re.findall(r'[a-z]+', phrase.lower()))
    backwards = forwards[::-1]
    
    There are two distincts types of 'time', in this context: absolute time and relative time.

Absolute time is the 'real-world time', which is returned by time.time() and which we are all used to deal with. It is usually measured from a fixed point in time in the past (e.g. the UNIX epoch of 00:00:00 UTC on 01/01/1970) at a resolution of at least 1 second. Modern systems usually provide milli- or micro-second resolution. It is maintained by the dedicated hardware on most computers, the RTC (real-time clock) circuit is normally battery powered so the system keeps track of real time between power ups. This 'real-world time' is also subject to modifications based on your location (time-zones) and season (daylight savings) or expressed as an offset from UTC (also known as GMT or Zulu time).

Secondly, there is relative time, which is returned by time.perf_counter and time.process_time. This type of time has no defined relationship to real-world time, in the sense that the relationship is system and implementation specific. It can be used only to measure time intervals, i.e. a unit-less value which is proportional to the time elapsed between two instants. This is mainly used to evaluate relative performance (e.g. whether this version of code runs faster than that version of code).

On modern systems, it is measured using a CPU counter which is monotonically increased at a frequency related to CPU's hardware clock. The counter resolution is highly dependent on the system's hardware, the value cannot be reliably related to real-world time or even compared between systems in most cases. Furthermore, the counter value is reset every time the CPU is powered up or reset.

time.perf_counter returns the absolute value of the counter. time.process_time is a value which is derived from the CPU counter but updated only when a given process is running on the CPU and can be broken down into 'user time', which is the time when the process itself is running on the CPU, and 'system time', which is the time when the operating system kernel is running on the CPU on behalf on the process.
    
   


bucket = [[] for _ in range(len(nums) + 1)]
        Count = Counter(nums).items()  
        for num, freq in Count: bucket[freq].append(num)
        flat_list = list(chain(*bucket))
        return flat_list[::-1][:k]
        

cur = "{}->{}".format(cur, nums[end-1])
ans2 = cur = float('inf')

def myfunc(a):
  return len(a)
x = map(myfunc, ('apple', 'banana', 'cherry'))
print(x)
#convert the map into a list, for readability:
print(list(x))




cd xxx
export Gxxxx_HOST=git.xxx.net
export Gxxxxx_TOKEN=X7xxxxxxxxxxxxTt
export BIxxxxx_HOST=xx-xx.xx-xx.aws
export BIxxxT_TOKEN=NzY0MxxxxJVqxUjXxxxxxxxxxxxx48uE
  python3 -m venv venv
  source venv/bin/activate .
  pip install -r requirements.txt
  pip install --upgrade pip
  pip install argparse

hashtable
points.get(num, 0) if have value, else get 0


        dic=Counter(nums)
        keys=sorted(dic.keys())
