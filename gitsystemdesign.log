https://medium.com/@willhayjr/the-architecture-and-history-of-git-a-distributed-version-control-system-62b17dd37742
Git 的架构和历史：分布式版本控制系统
架构概述
版本控制系统通常具有三个核心功能，所有这些都是 Linus 内置在 Git 中的。它必须能够存储内容、跟踪对所述内容的更改（所有历史记录，包括合并元数据），并可选择与项目合作者分发内容和提交历史记录。
Git 使用有向无环图 (DAG) 进行内容存储以及提交和合并历史记录。DAG 是一个有向图，它具有有限数量的顶点和边（顶点之间的连接），不包含循环（非循环）。非循环意味着没有办法从节点 A 到节点 B 并通过任意数量的边循环回到节点 A。DAG 还必须具有拓扑排序。这意味着顶点都具有在序列中从早到晚指向的边（如上图中从左上角移动到右下角的箭头所示）。
Git 还利用这种有向无环图结构进行内容存储。Git 本质上是一个内容可寻址的文件系统，由对象组成，这些对象形成一个层次结构，该层次结构反映了内容的文件系统树。Git 使用三种主要的原始类型来表示存储库的内容：树、blob 和提交。所有内容本质上都存储为树或 blob 对象。Blob 是存储在存储库中的文件，树对象引用子树或 Blob。您可以将 blob 视为文件内容，而树就像目录。另一方面，提交对象具有三个主要属性。它指向一棵树，表示提交时项目的顶级快照。它还包含对直接在它之前的提交的引用、提交作者的字段以及可选的提交消息。
所有这些对象原语都由 40 位 SHA 哈希引用。两个相同的对象将具有相同的哈希值，而不同的对象将具有不同的哈希值。通过使用 SHA 哈希作为参考身份，Git 可以有效地计算差异。为了防止数据损坏，可以重新计算对象的哈希值以轻松识别损坏或数据丢失。
Git 还使用 DAG 来跟踪内容更改的历史记录。如上所述，每个提交对象都包含有关其祖先的元数据，其中一个提交可以有任意数量的父提交。Git 使用 DAG 来存储内容并跟踪提交和合并历史允许它保持完整的分支能力，因为文件的历史一直链接到其目录结构到根目录和提交对象。
当将分支“feature7”合并到主分支时，Git 执行“快进”合并，将主分支指针向前移动。只有当当前“feature7”分支的提交历史包含被合并到（master）的分支的最新提交（HEAD）时，才可能进行“快进”合并。

当您所在分支的提交不是您要合并的分支的直接祖先时，Git 使用不同的合并策略，这意味着您的开发历史不同。在这种情况下，Git 使用“递归”策略并执行三路合并。Git 创建文件状态的新快照和指向快照的新合并提交对象。这个合并提交对象现在有两个父对象，指向被合并在一起的两个分支头部的提交对象。Git 对非线性内容存储和提交历史系统的使用允许它无缝地将项目的两个分支合并在一起。

分发和初始化
Git 使用分布式模型处理协作者之间项目的内容和历史分布，用户可以离线工作并在其本地存储库上提交。每个贡献者都有一个 Git 存储库的副本，他们可以在其中脱机工作、进行更改、提交更改以及（可选）从远程存储库中提取新更改以保持最新状态。当协作者准备好共享他们的更改时，他们可以将它们推送到可公开访问的存储库以供其他协作者访问。一旦公共存储库验证提交可以应用于它被推送到的分支，就会为公共存储库创建在本地存储库中创建和存储的相同对象，并更新存储库以供所有协作者访问。


为了初始化本地 Git 存储库，您运行命令“git init”。这会在您的本地文件系统上创建一个新初始化的存储库，在您当前的工作目录中创建一个 .git 目录。.git 目录是根“工作目录”的子目录，用作实际的本地存储库，包含各种配置文件、对象数据库、分支的引用指针以及可以在项目生命周期的各个点运行的其他脚本. 对文件进行一些更改后，将创建另一个重要文件 Git索引，位于 .git/index 中。Git 索引文件是工作目录和本地存储库之间的暂存区域，在一个或多个要提交的文件中暂存特定更改。


Git 的另一组问题是它无法处理大量文件或大文件大小。如果您的项目包含大量非文本文件，例如图像，并且频繁更新，G​​it 会变得非常慢，使得最大的实际存储库大小只有几 GB。


