
Representational state transfer (REST) is a software architectural style that was created to guide the design and development of the architecture for the World Wide Web
A RESTful API is an architectural style for an application program interface (API) that uses HTTP requests to access and use data. That data can be used to GET, PUT, POST and DELETE data types, which refers to the reading, updating, creating and deleting of operations concerning resources.

Put simply, there are no differences between REST and RESTful as far as APIs are concerned. REST is the set of constraints. RESTful refers to an API adhering to those constraints. It can be used in web services, applications, and software.


SOAP is a messaging protocol specification for exchanging structured information in the implementation of 
web services in computer networks.  SOAP – Simple Object Access Protocol
REST follows the object-oriented programming paradigm of noun-verb. REST is very data-driven,
epresentational state transfer is a software architectural style that was created to guide the design and development of the architecture for the World Wide Web. REST defines a set of constraints for how the architecture of an Internet-scale distributed hypermedia system, such as the Web, should behave. 
Representational state transfer (REST) is a software architectural style that was created to guide the design and development of the architecture for the World Wide Web
A RESTful API is an architectural style for an application program interface (API) that uses HTTP requests to access and use data. That data can be used to GET, PUT, POST and DELETE data types, which refers to the reading, updating, creating and deleting of operations concerning resources.

Put simply, there are no differences between REST and RESTful as far as APIs are concerned. REST is the set of constraints. RESTful refers to an API adhering to those constraints. It can be used in web services, applications, and software.




SOAP provides the following advantages when compared to REST:

Language, platform, and transport independent (REST requires use of HTTP)     
Works well in distributed enterprise environments (REST assumes direct point-to-point communication)
Standardized
Provides significant pre-build extensibility in the form of the WS* standards
Built-in error handling
Automation when used with certain language products
REST is easier to use for the most part and is more flexible. It has the following advantages when compared to SOAP:

Uses easy to understand standards like swagger and OpenAPI Specification 3.0
Smaller learning curve
Efficient (SOAP uses XML for all messages, REST mostly uses smaller message formats like JSON)
Fast (no extensive processing required)
Closer to other Web technologies in design philosophy
As one REST API tutorial put it: SOAP is like an envelope while REST is just a postcard.




https://www.youtube.com/watch?v=_NyVaxEIYGo
https://github.com/cicadasmile/spring-cloud-base
https://blog.51cto.com/u_14439672/2554728


 RabbitMQ. Kafka  
 for bank, security, slow
 for big data, fast, use the zookeeper?
 
 ZooKeeper is used in distributed systems for service synchronization and as a naming registry. When working with Apache Kafka, ZooKeeper is primarily used to track the status of nodes in the Kafka cluster and maintain a list of 
 Kafka topics and messages.
 Redis is used if you want to deliver messages instantly to the consumer and you can live up with data loss, 
 and the amount of data to deal is less. Kafka can be used when you're looking for reliability, high throughput, 
 fault-tolerant, and volume of data is huge.
 
The biggest difference between Kafka and Redis PUB/SUB is that Kafka is a complete system, while Redis PUB/SUB is 
just a utility, it doesn't mean to offend Redis. In essence, this is a data 
integration problem

Redis is an in-memory data structure store, used as a distributed, in-memory key–value database, cache and 
message broker, with optional durability. Redis supports different kinds of abstract data structures, such as 
strings, lists, maps, sets, sorted sets, HyperLogLogs, bitmaps, streams, and spatial indices.  
github.com/redis/redis

Apache Kafka is a framework implementation of a software bus using stream-processing. It is an open-source 
software platform developed by the Apache Software Foundation written in Scala and Java. The project aims to 
provide a unified, high-throughput, low-latency platform for handling real-time data feeds. 
 github.com/apache/kafka
 Kafka是由Apache开源，具有分布式、分区的、多副本的、多订阅者，基于Zookeeper协调的分布式消息处理平台，由Scala和Java语言编写。还常用于搜集用户在应用服务中产生的日志数据。
 
 
 Cassandra is a free and open-source, distributed, wide-column store, NoSQL database management system designed
 to handle large amounts of data across many commodity servers, providing high availability with
 no single point of failure
 gitbox.apache.org/repos/asf/cassandra.git
 
 Elasticsearch is a search engine based on the Lucene library. It provides a distributed, multitenant-capable full-text 
 search engine with an HTTP web interface and schema-free JSON documents
 github.com/elastic/elasticsearch
 
 


https://blog.pramp.com/how-to-succeed-in-a-system-design-interview-27b35de0df26

First one has real examples and shows how to approach them, 
second one helps to understand the core system design terms and principles.

Educative.io system design training which helped me a lot; 
https://www.educative.io/courses/grokking-the-system-design-interview

there is also one free resource that goes through core parts of system design: 
https://github.com/donnemartin/system-design-primer

#####
1. ：
https://www.educative.io/courses/grokking-the-system-design-interview

2.  半小時的step by step guide， ：
https://www.youtube.com/channel/UC9vLsnF6QPYuH51njmIooCQ

3.  面試前看一些比較實際的例子， design Instagram，chat system之類的， chat system一類的題，
要make sure提到websocket來實現雙向通信，每種題考點：
https://www.youtube.com/c/GauravSensei/videos

4.  ：
https://www.1point3acres.com/bbs/thread-559285-1-1.html
https://www.1point3acres.com/bbs/thread-683982-1-1.html



系统设计面试考什么？
考你如何做tradeoff，考你对一项技术的了解，考你分析问题的能力，等等
怎么才算答的好？
最理想的状况就是：题目给出来，你就知道这个系统大概的结构会是怎么样的，所有的考点在哪里。
怎么做到立刻知道大概的结构
你得看过这些结构并且知道它所有的tradeoff，知道它用到的所有技术等等，现场凭借经验想是只有大牛才能做的活。我等憨憨还是老实学习现有的系统把。
怎么知道考点在哪里？
想想如果你是面试官你会问什么？在看其他人设计的结构的时候带着问题去看带着问题去看带着问题去看，设想哪里你可以提出什么样的问题，这样慢慢你就会有体会了。
举个例子，系统设计要用到message queue，大半会提到kafka。这个时候你得知道面试官会问kafka什么？他八成会问用kafka有什么问题。有啥问题？kafka只保证at least one time delivery。你最好给每个message加sequence number来防止duplictes
（是的我知道kafka后来promise了exact one time delivery的feature。不过没人用）
类似这样，你得在面试官问出来之前就知道问题是啥。这是可以做到的。只要你总是带着问题去看。
看什么？educative上的那个么？
那个只是入门，它是个好课但是不能应付所有的面试。原因：
1. 它最大的问题就是它是作者的一家之言。作者所描述的系统很多其实并不是真实的在生产环境下的系统的样子
2. 看完了你还是不知道会被问到什么问题
3. 很多考点作者没有展开，比如考的最多的tinyurl，作者并没有提到cache部分的设计的考虑。在生产环境中如何refresh cache？如何invalidate一个cache中的url？用memcache还是redis？作者并没有说但是真的会有人考（我就被考到了）
所以它不值得看么？
不，它很值得看，目前来看它是最好的入门教材。建议看五遍，建议把每个不懂的词都google出来完全完全看懂。比如常常常常考到的bloomfilter，发现很多新手没看这个之前也许你还没见过这个词。请google出它的pro/con和怎么用什么时候用等等。以此类推。
你说看这个不够，那看什么？
1. 看Design Data Intensive Application这本书。请买这本书。有空就看。请一定把第二部分全部看完。有精力请看第三部分。第二部分请看3遍。第二部分能够解答40～50%你遇到的跟data有关的设计
2. 最重要的而且并没有多少人提到的，请看各个大公司的engineer blog。非常非常非常重要非常非常非常重要非常非常非常重要非常非常非常重要非常非常非常重要非常非常非常重要非常非常非常重要非常非常非常重要非常非常非常重要非常非常非常重要非常非常非常重要
啥？blog有啥好看的？
1. blog提到的系统就是现在在生产环境的系统
2. blog会提到各种tradeoff以及做这种设计的原因
3. 好的blog会给出各种详细的细节，甚至源代码（当然你不需要阅读源码这么深入）
4. blog提到的系统很容易拿来举一反三
#####
举例： https://eng.uber.com/cherami/
请仔细阅读这一篇文章。如果读懂了并且在读的过程中不停的问自己考点，那么这一篇文章可以解决不下10个不同的system design问题：如何设计一个job queue？如何保证job一定执行？deadleatter咋设计（uber blog里还有单独一篇讲这个）如何设计一个分布式爬虫？等等等等
哪里有好的blog？
uber，airbnb的我看的很多。我时间少。你可以把大公司的都看了。
我才深入看了10来篇高质量的就觉得融会贯通了。
有one more thing么？
有的。多看看经典的presentation presentation presentation。请去youtube搜，
 
 
https://www.infoq.com/presentations/pinterest/
这一篇文章可以终结你对sharding问题的困惑。只靠shard用mysql也可以撑起billion级别的访问量的。
我还很喜欢这篇： https://www.infoq.com/presentations/Twitter-Timeline-Scalability/
按照这个套路走我真的能过所有的system design面试么？
真的能。
大概要多久能像你这么屌？（笑
两个月就够了。0基础入门的话。
你还能更屌一点么？
能啊，请看论文。dynamo的论文，big table的论文，cassandra的论文，google doc系统的论文等等，很多
jiuzhang的课有用么？
出于好奇我看了。比educative作用小。它教你的，不足以应付面试。


https://www.youtube.com/c/ScottShiCS/videos
https://www.youtube.com/watch?v=th_73AVA4dY&list=PLAd5bt5mn3V3TrrJFBpnu4PH9e8KZMvNA
内容主要在两个方面
系统设计基础。主要是基于design data intensive application这本书， 包含了以下几个模块
Truths, knowledge, and lies in the distributed syste
Introduction to distributed system
Introduction to Data Mode
Storage and Retrieva
Partitio
Replication
Transactio
Consensus

此外 还有专门的mock interview， 前一部分是我自问自答。 后几个找到了一些volunteer来做interviewee
System Design Interview Tips
Design Slack / Facebook messenger / wechat
Design web crawler
Design 12306 / large code deployment system
Design youtube  covered real time comment
Design leetcode
Design notification system
Design recommendation system
Design Craiglists
Design google calendar
Design key value store
Design payment system
Design facebook feeds
Design google map

   
内容主要有两个方面
系统设计基础。 主要基于书籍设计数据密集型应用，包括以下模块
分布式系统中的真相、知识和谎言
分布式系统简介
数据模式介绍
存储和检索
分区
复制
交易
共识

 
系统设计面试技巧
Design Slack / Facebook messenger / 微信
设计网络爬虫
设计12306/大代码部署系统
设计 youtube 涵盖实时评论
设计leetcode
设计通知系统
设计推荐系统
设计Craiglists
设计谷歌日历
设计键值存储
设计支付系统
设计脸书订阅源
设计谷歌地图
https://www.youtube.com/watch?v=-UXWETzHG38&list=PLAd5bt5mn3V3TrrJFBpnu4PH9e8KZMvNA&index=2
